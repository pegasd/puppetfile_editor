#!/usr/bin/env ruby
# frozen_string_literal: true

require 'puppetfile_editor/cli'
require 'optparse'

filename = File.basename(__FILE__)

# Display help if no arguments are specified
ARGV.push('-h') if ARGV.empty?

options = { puppetfile: 'Puppetfile' }

subcommands = {
  'edit'   => OptionParser.new do |parser|
    parser.banner = "Usage: #{filename} edit [options]"
    parser.on('-m', '--module-name NAME', 'Module name') do |setting|
      options[:name] = setting
    end
    parser.on('-u', '--update PARAM=VALUE', 'What to update') do |setting|
      options[:version] = setting
    end
  end,
  'format' => OptionParser.new do |parser|
    parser.banner = "Usage: #{filename} format"
  end,
  'delete' => OptionParser.new do |parser|
    parser.banner = "Usage: #{filename} format -m MODULENAME"
    parser.on('-m', '--module-name NAME', 'Module name') do |setting|
      options[:name] = setting
    end
  end,
  'add'    => OptionParser.new do |parser|
    parser.banner = "Usage: #{filename} add [options]"
    parser.on('-m', '--module-name NAME', 'Module name') do |setting|
      options[:name] = setting
    end
    parser.on('-t', '--type TYPE', [:hg, :forge, :local, :git], 'Type of module to add') do |setting|
      options[:type] = setting
    end
    parser.on('-l', '--url [URL]', 'URL of module (applicable for hg and git modules)') do |setting|
      options[:url] = setting
    end
    parser.on('-u', '--version [PARAM=VALUE]', 'Version of module to add in the form of PARAM=VALUE') do |setting|
      if (match = setting.match(/^(\w+)=([^=]+)$/))
        options[:param] = match[1]
        options[:value] = match[2]
      elsif (match = setting.match(/^\d+(\.\d)*$/))
        options[:version] = match[0]
      else
        warn 'Version must match PARAM=VALUE pattern or be a proper Forge version.'
        exit 1
      end
    end
  end,
  'merge'  => OptionParser.new do |parser|
    parser.banner = "Usage: #{filename} merge [options]"
    parser.separator '  Merge existing Puppetfile with another one from STDIN.'
    parser.separator '  Dump the result to STDOUT.'
    parser.separator ''

    parser.on('-f', '--force', 'Force merge module versions') do |setting|
      options[:force] = setting
    end
  end,
}

OptionParser.new do |parser|
  parser.banner = "Usage: #{filename} [options] [command] [command options]"
  parser.separator ''
  parser.separator ' Supported commands:'
  subcommands.each_key do |command|
    parser.separator "  * #{command}"
  end
  parser.separator ''
  parser.separator ' Supported global options:'
  parser.on('-p', '--puppetfile PUPPETFILE', 'Path to your Puppetfile.') do |puppetfile|
    options[:puppetfile] = puppetfile
  end
end.order!

command = ARGV.shift
subcommands[command].order!

pf = PuppetfileEditor::CLI.new(options[:puppetfile])
pf.public_send(command, options) if pf.respond_to?(command)
